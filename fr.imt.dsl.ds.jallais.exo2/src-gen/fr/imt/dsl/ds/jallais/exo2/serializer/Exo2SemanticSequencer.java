/*
 * generated by Xtext 2.28.0
 */
package fr.imt.dsl.ds.jallais.exo2.serializer;

import com.google.inject.Inject;
import fr.imt.dsl.ds.jallais.exo2.exo2.Button;
import fr.imt.dsl.ds.jallais.exo2.exo2.Exo2Package;
import fr.imt.dsl.ds.jallais.exo2.exo2.Frame;
import fr.imt.dsl.ds.jallais.exo2.exo2.GUI;
import fr.imt.dsl.ds.jallais.exo2.exo2.Label;
import fr.imt.dsl.ds.jallais.exo2.exo2.Section;
import fr.imt.dsl.ds.jallais.exo2.services.Exo2GrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class Exo2SemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private Exo2GrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Exo2Package.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Exo2Package.BUTTON:
				sequence_Button(context, (Button) semanticObject); 
				return; 
			case Exo2Package.FRAME:
				sequence_Frame(context, (Frame) semanticObject); 
				return; 
			case Exo2Package.GUI:
				sequence_GUI(context, (GUI) semanticObject); 
				return; 
			case Exo2Package.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case Exo2Package.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     GuiComponent returns Button
	 *     Button returns Button
	 *
	 * Constraint:
	 *     (text=STRING redirectTo=[Frame|ID]?)
	 * </pre>
	 */
	protected void sequence_Button(ISerializationContext context, Button semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Frame returns Frame
	 *
	 * Constraint:
	 *     (name=ID title=STRING width=INT lenght=INT sections+=Section*)
	 * </pre>
	 */
	protected void sequence_Frame(ISerializationContext context, Frame semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GUI returns GUI
	 *
	 * Constraint:
	 *     frames+=Frame+
	 * </pre>
	 */
	protected void sequence_GUI(ISerializationContext context, GUI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GuiComponent returns Label
	 *     Label returns Label
	 *
	 * Constraint:
	 *     text=STRING
	 * </pre>
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Exo2Package.Literals.LABEL__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Exo2Package.Literals.LABEL__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getTextSTRINGTerminalRuleCall_1_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Section returns Section
	 *     GuiComponent returns Section
	 *
	 * Constraint:
	 *     (name=ID elements+=GuiComponent*)
	 * </pre>
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
